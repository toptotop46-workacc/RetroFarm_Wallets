import * as crypto from 'crypto'
import * as fs from 'fs'
import * as readline from 'readline'

export class KeyEncryption {
  private static readonly ALGORITHM = 'aes-256-cbc'
  private static readonly ENCRYPTED_FILE = 'keys.encrypted'
  private static readonly SALT_FILE = 'keys.salt'

  // –î–µ—Ä–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è
  private static deriveKey (password: string, salt: Buffer): Buffer {
    return crypto.pbkdf2Sync(password, salt, 100000, 32, 'sha256')
  }

  // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
  static encryptKeys (privateKeys: string[], password: string): void {
    const salt = crypto.randomBytes(32)
    const key = this.deriveKey(password, salt)
    const iv = crypto.randomBytes(16)

    const keysData = privateKeys.join('\n')
    const cipher = crypto.createCipheriv(this.ALGORITHM, key, iv)

    let encrypted = cipher.update(keysData, 'utf8', 'hex')
    encrypted += cipher.final('hex')

    const encryptedData = iv.toString('hex') + ':' + encrypted

    fs.writeFileSync(this.ENCRYPTED_FILE, encryptedData)
    fs.writeFileSync(this.SALT_FILE, salt.toString('hex'))
  }

  // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–ª—é—á–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  static decryptKeys (password: string): string[] {
    if (!fs.existsSync(this.ENCRYPTED_FILE) || !fs.existsSync(this.SALT_FILE)) {
      throw new Error('–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    }

    try {
      const saltHex = fs.readFileSync(this.SALT_FILE, 'utf8')
      const salt = Buffer.from(saltHex, 'hex')
      const key = this.deriveKey(password, salt)

      const encryptedData = fs.readFileSync(this.ENCRYPTED_FILE, 'utf8')
      const [ivHex, encrypted] = encryptedData.split(':')

      if (!ivHex || !encrypted) {
        throw new Error('invalid_format')
      }

      const iv = Buffer.from(ivHex, 'hex')

      const decipher = crypto.createDecipheriv(this.ALGORITHM, key, iv)
      let decrypted = decipher.update(encrypted, 'hex', 'utf8')
      decrypted += decipher.final('utf8')

      return decrypted.split('\n').filter(key => key.trim())
    } catch {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
      throw new Error('WRONG_PASSWORD')
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
  static hasEncryptedKeys (): boolean {
    return fs.existsSync(this.ENCRYPTED_FILE) && fs.existsSync(this.SALT_FILE)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª—é—á–µ–π
  static hasPlainKeys (): boolean {
    return fs.existsSync('keys.txt')
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  static async promptPasswordWithRetry (): Promise<string[]> {

    while (true) {
      try {
        const password = await this.promptPassword('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ')
        const keys = this.decryptKeys(password)
        return keys
      } catch (error) {
        if (error instanceof Error && error.message === 'WRONG_PASSWORD') {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
          continue
        }
        throw error
      }
    }
  }

  // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–ª—é—á–µ–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  static decryptKeysWithRetry (): string[] {

    while (true) {
      try {
        const password = this.promptPasswordSync('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ')
        const keys = this.decryptKeys(password)
        return keys
      } catch (error) {
        if (error instanceof Error && error.message === 'WRONG_PASSWORD') {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
          continue
        }
        throw error
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  static async checkAndOfferEncryption (): Promise<boolean> {
    const hasPlain = this.hasPlainKeys()
    const hasEncrypted = this.hasEncryptedKeys()

    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–µ—Ç –∫–ª—é—á–µ–π –≤–æ–æ–±—â–µ
    if (!hasPlain && !hasEncrypted) {
      console.log('\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –∫–ª—é—á–∞–º–∏')
      console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª keys.txt —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏')
      console.log('üí° –ö–∞–∂–¥—ã–π –∫–ª—é—á –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ñ–æ—Ä–º–∞—Ç: 0x... –∏–ª–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞')
      process.exit(1)
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
    if (!hasPlain && hasEncrypted) {
      console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏')
      console.log('üîê –ö–ª—é—á–∏ –∑–∞—â–∏—â–µ–Ω—ã –ø–∞—Ä–æ–ª–µ–º')
      return false // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ï—Å—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ, –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ (–∫–æ–Ω—Ñ–ª–∏–∫—Ç)
    if (hasPlain && hasEncrypted) {
      console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –µ—Å—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ, –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏')
      console.log('üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏: keys.encrypted + keys.salt')
      console.log('üìÑ –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª—é—á–∏: keys.txt')
      console.log('‚ö†Ô∏è  –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç–µ keys.txt –≤—Ä—É—á–Ω—É—é')
      console.log('üîÑ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É')
      process.exit(1)
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª—é—á–∏
    if (hasPlain && !hasEncrypted) {
      console.log('\nüîê –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª keys.txt —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏')
      console.log('‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')

      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      })

      const answer = await new Promise<string>((resolve) => {
        rl.question('–•–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ —Å–µ–π—á–∞—Å? (y/n): ', (answer: string) => {
          rl.close()
          resolve(answer.toLowerCase())
        })
      })

      if (answer === 'y' || answer === 'yes') {
        try {
          await this.migratePlainKeys()
          console.log('\n‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
          console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm start')
          console.log('üóëÔ∏è  –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª keys.txt –≤—Ä—É—á–Ω—É—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
          return true // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
          console.log('‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–ª—é—á–∞–º–∏ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)')
          return false // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        }
      } else {
        console.log('‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–ª—é—á–∞–º–∏ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)')
        return false // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
      }
    }

    return false // –ù–µ –¥–æ–ª–∂–Ω–æ –¥–æ–π—Ç–∏ –¥–æ —Å—é–¥–∞
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è (—Å–∫—Ä—ã—Ç—ã–π)
  private static async promptPassword (message: string = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: '): Promise<string> {
    const readlineSync = await import('readline-sync')
    return readlineSync.default.question(message, {
      hideEchoBack: true,
      mask: '*'
    })
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
  private static promptPasswordSync (message: string = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: '): string {
    const readlineSync = require('readline-sync')
    return readlineSync.question(message, {
      hideEchoBack: true,
      mask: '*'
    })
  }

  // –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
  static async promptPasswordWithConfirmation (): Promise<string> {
    const password = await this.promptPassword('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ')
    const confirmPassword = await this.promptPassword('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ')

    if (password !== confirmPassword) {
      throw new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
    }

    if (password.length < 6) {
      throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
    }

    return password
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª—é—á–µ–π –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ
  static async migratePlainKeys (): Promise<void> {
    if (!this.hasPlainKeys()) {
      throw new Error('–§–∞–π–ª keys.txt –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    const content = fs.readFileSync('keys.txt', 'utf8')
    const lines = content.split('\n')
    const privateKeys: string[] = []

    for (const line of lines) {
      const trimmedLine = line.trim()
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        let privateKey = trimmedLine
        if (!privateKey.startsWith('0x')) {
          privateKey = '0x' + privateKey
        }
        if (/^0x[a-fA-F0-9]{64}$/.test(privateKey)) {
          privateKeys.push(privateKey)
        }
      }
    }

    if (privateKeys.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª–µ keys.txt')
    }

    const password = await this.promptPasswordWithConfirmation()
    this.encryptKeys(privateKeys, password)

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ ${privateKeys.length} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π`)
  }
}
