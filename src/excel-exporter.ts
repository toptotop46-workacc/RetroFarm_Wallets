import ExcelJS from 'exceljs'
import { AllNetworksBalanceResult, MultiWalletBalanceResult } from './balance-checker.js'
import { BalanceResult } from './multicall3-service.js'

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
 */
export interface ExcelExportConfig {
  filename?: string
  includeTimestamp?: boolean
  sortByValue?: boolean
  groupByNetwork?: boolean
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel
 */
export class ExcelExporter {
  private workbook: ExcelJS.Workbook

  constructor () {
    this.workbook = new ExcelJS.Workbook()
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ Excel
   */
  async exportBalanceResults (
    results: AllNetworksBalanceResult,
    config: ExcelExportConfig = {}
  ): Promise<string> {
    const filename = config.filename || `wallet_balances_${new Date().toISOString().split('T')[0]}.xlsx`

    console.log(`üìä –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª: ${filename}`)

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workbook –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
    this.workbook = new ExcelJS.Workbook()

    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    await this.createSummarySheet(results)

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Å–µ—Ç—è–º
    await this.createNetworksSheet(results, config)

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
    await this.createNativeBalancesSheet(results)

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    await this.createTokensSheet(results, config)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    await this.workbook.xlsx.writeFile(filename)

    console.log(`‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${filename}`)
    return filename
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  private async createSummarySheet (
    results: AllNetworksBalanceResult
  ): Promise<void> {
    const worksheet = this.workbook.addWorksheet('–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.columns = [
      { header: '–ü–∞—Ä–∞–º–µ—Ç—Ä', key: 'parameter', width: 30 },
      { header: '–ó–Ω–∞—á–µ–Ω–∏–µ', key: 'value', width: 50 }
    ]

    // –î–∞–Ω–Ω—ã–µ
    const summaryData = [
      { parameter: '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', value: results.walletAddress },
      { parameter: '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD)', value: `$${results.totalUsdValue.toFixed(2)}` },
      { parameter: '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', value: new Date(results.timestamp).toLocaleString('ru-RU') },
      { parameter: '–°–µ—Ç–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º', value: results.networks.filter(n => n.totalUsdValue > 0).length.toString() }
    ]

    worksheet.addRows(summaryData)

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    this.styleSummarySheet(worksheet)
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Å–µ—Ç—è–º
   */
  private async createNetworksSheet (
    results: AllNetworksBalanceResult,
    _config: ExcelExportConfig
  ): Promise<void> {
    const worksheet = this.workbook.addWorksheet('–°–µ—Ç–∏')

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.columns = [
      { header: '–°–µ—Ç—å', key: 'network', width: 20 },
      { header: 'Chain ID', key: 'chainId', width: 10 },
      { header: '–ù–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å', key: 'nativeBalance', width: 20 },
      { header: '–°–∏–º–≤–æ–ª', key: 'symbol', width: 10 },
      { header: 'USD —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ', key: 'nativeUsdValue', width: 20 },
      { header: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤', key: 'tokenCount', width: 15 },
      { header: 'USD —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤', key: 'tokensUsdValue', width: 20 },
      { header: '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD)', key: 'totalUsdValue', width: 20 }
    ]

    // –î–∞–Ω–Ω—ã–µ
    const networksData = results.networks.map(network => ({
      network: network.networkName,
      chainId: network.chainId,
      nativeBalance: network.nativeBalance.balanceFormatted,
      symbol: network.nativeBalance.symbol,
      nativeUsdValue: `$${network.nativeBalance.usdValue.toFixed(2)}`,
      tokenCount: network.tokenBalances.length,
      tokensUsdValue: `$${network.tokenBalances.reduce((sum, token) => sum + token.usdValue, 0).toFixed(2)}`,
      totalUsdValue: `$${network.totalUsdValue.toFixed(2)}`
    }))

    worksheet.addRows(networksData)

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (_config.sortByValue) {
      worksheet.getRows(2, worksheet.rowCount - 1)?.sort((a, b) => {
        const aValue = parseFloat(a.getCell('totalUsdValue').value?.toString().replace('$', '') || '0')
        const bValue = parseFloat(b.getCell('totalUsdValue').value?.toString().replace('$', '') || '0')
        return bValue - aValue
      })
    }

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    this.styleNetworksSheet(worksheet)
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
   */
  private async createNativeBalancesSheet (
    results: AllNetworksBalanceResult
  ): Promise<void> {
    const worksheet = this.workbook.addWorksheet('–ù–∞—Ç–∏–≤–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã')

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.columns = [
      { header: '–°–µ—Ç—å', key: 'network', width: 20 },
      { header: 'Chain ID', key: 'chainId', width: 10 },
      { header: '–°–∏–º–≤–æ–ª', key: 'symbol', width: 10 },
      { header: '–ë–∞–ª–∞–Ω—Å', key: 'balance', width: 20 },
      { header: 'USD —Å—Ç–æ–∏–º–æ—Å—Ç—å', key: 'usdValue', width: 20 }
    ]

    // –î–∞–Ω–Ω—ã–µ
    const nativeData = results.networks.map(network => ({
      network: network.networkName,
      chainId: network.chainId,
      symbol: network.nativeBalance.symbol,
      balance: network.nativeBalance.balanceFormatted,
      usdValue: `$${network.nativeBalance.usdValue.toFixed(2)}`
    }))

    worksheet.addRows(nativeData)

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    this.styleNativeBalancesSheet(worksheet)
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏
   */
  private async createTokensSheet (
    results: AllNetworksBalanceResult,
    _config: ExcelExportConfig
  ): Promise<void> {
    const worksheet = this.workbook.addWorksheet('–¢–æ–∫–µ–Ω—ã')

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.columns = [
      { header: '–°–µ—Ç—å', key: 'network', width: 20 },
      { header: 'Chain ID', key: 'chainId', width: 10 },
      { header: '–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞', key: 'tokenAddress', width: 45 },
      { header: '–°–∏–º–≤–æ–ª', key: 'symbol', width: 15 },
      { header: '–ù–∞–∑–≤–∞–Ω–∏–µ', key: 'name', width: 30 },
      { header: '–ë–∞–ª–∞–Ω—Å', key: 'balance', width: 20 },
      { header: '–î–µ—Ü–∏–º–∞–ª—ã', key: 'decimals', width: 10 },
      { header: '–¶–µ–Ω–∞ (USD)', key: 'priceUsd', width: 15 },
      { header: 'USD —Å—Ç–æ–∏–º–æ—Å—Ç—å', key: 'usdValue', width: 20 }
    ]

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–µ–π
    const allTokens: Array<BalanceResult & { network: string; chainId: number }> = []

    for (const network of results.networks) {
      for (const token of network.tokenBalances) {
        allTokens.push({
          ...token,
          network: network.networkName,
          chainId: network.chainId
        })
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã (–≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–∏)
    const filteredTokens = allTokens.filter(token => token.balance > 0n)

    // –î–∞–Ω–Ω—ã–µ
    const tokensData = filteredTokens.map(token => ({
      network: token.network,
      chainId: token.chainId,
      tokenAddress: token.address,
      symbol: token.symbol,
      name: token.name,
      balance: token.balanceFormatted,
      decimals: token.decimals,
      priceUsd: `$${parseFloat(token.priceUSD).toFixed(6)}`,
      usdValue: `$${token.usdValue.toFixed(2)}`
    }))

    worksheet.addRows(tokensData)

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (_config.sortByValue) {
      worksheet.getRows(2, worksheet.rowCount - 1)?.sort((a, b) => {
        const aValue = parseFloat(a.getCell('usdValue').value?.toString().replace('$', '') || '0')
        const bValue = parseFloat(b.getCell('usdValue').value?.toString().replace('$', '') || '0')
        return bValue - aValue
      })
    }

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    this.styleTokensSheet(worksheet)
  }

  /**
   * –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  private styleSummarySheet (worksheet: ExcelJS.Worksheet): void {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.getRow(1).font = { bold: true, size: 14 }
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF4472C4' }
    }
    worksheet.getRow(1).font = { color: { argb: 'FFFFFFFF' } }

    // –ì—Ä–∞–Ω–∏—Ü—ã
    worksheet.eachRow((row) => {
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        }
      })
    })
  }

  /**
   * –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ —Å —Å–µ—Ç—è–º–∏
   */
  private styleNetworksSheet (worksheet: ExcelJS.Worksheet): void {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.getRow(1).font = { bold: true, size: 12 }
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF70AD47' }
    }
    worksheet.getRow(1).font = { color: { argb: 'FFFFFFFF' } }

    // –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä
    worksheet.autoFilter = 'A1:H1'

    // –ì—Ä–∞–Ω–∏—Ü—ã
    worksheet.eachRow((row) => {
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        }
      })
    })
  }

  /**
   * –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
   */
  private styleNativeBalancesSheet (worksheet: ExcelJS.Worksheet): void {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.getRow(1).font = { bold: true, size: 12 }
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF5B9BD5' }
    }
    worksheet.getRow(1).font = { color: { argb: 'FFFFFFFF' } }

    // –ì—Ä–∞–Ω–∏—Ü—ã
    worksheet.eachRow((row) => {
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        }
      })
    })
  }

  /**
   * –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
   */
  private styleTokensSheet (worksheet: ExcelJS.Worksheet): void {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.getRow(1).font = { bold: true, size: 12 }
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE46C0B' }
    }
    worksheet.getRow(1).font = { color: { argb: 'FFFFFFFF' } }

    // –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä
    worksheet.autoFilter = 'A1:I1'

    // –ì—Ä–∞–Ω–∏—Ü—ã
    worksheet.eachRow((row) => {
      row.eachCell((cell) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        }
      })
    })
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  async createSummaryReport (results: AllNetworksBalanceResult): Promise<string> {
    const filename = `wallet_summary_${new Date().toISOString().split('T')[0]}.xlsx`

    console.log(`üìä –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç: ${filename}`)

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workbook –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    this.workbook = new ExcelJS.Workbook()

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç
    await this.createSummarySheet(results)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    await this.workbook.xlsx.writeFile(filename)

    console.log(`‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${filename}`)
    return filename
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ –æ–¥–∏–Ω Excel —Ñ–∞–π–ª
   */
  async exportMultiWalletResults (
    results: MultiWalletBalanceResult,
    config: ExcelExportConfig = {}
  ): Promise<string> {
    const filename = config.filename || `multi_wallet_balances_${new Date().toISOString().split('T')[0]}.xlsx`

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workbook –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    this.workbook = new ExcelJS.Workbook()

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º
    await this.createMultiWalletSummarySheet(results)

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å–æ —Å–≤–æ–¥–∫–æ–π –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
    await this.createWalletsSummarySheet(results, config)

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º
    await this.createMultiWalletDetailsSheet(results, config)

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    await this.createMultiWalletNativeBalancesSheet(results)

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    await this.createMultiWalletTokensSheet(results, config)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    await this.workbook.xlsx.writeFile(filename)

    return filename
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º
   */
  private async createMultiWalletSummarySheet (
    results: MultiWalletBalanceResult
  ): Promise<void> {
    const worksheet = this.workbook.addWorksheet('–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.columns = [
      { header: '–ü–∞—Ä–∞–º–µ—Ç—Ä', key: 'parameter', width: 30 },
      { header: '–ó–Ω–∞—á–µ–Ω–∏–µ', key: 'value', width: 50 }
    ]

    // –î–∞–Ω–Ω—ã–µ
    const summaryData = [
      { parameter: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤', value: results.wallets.length.toString() },
      { parameter: '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD)', value: `$${results.totalUsdValue.toFixed(2)}` },
      { parameter: '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', value: new Date(results.timestamp).toLocaleString('ru-RU') },
      { parameter: '–ö–æ—à–µ–ª—å–∫–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º', value: results.wallets.filter(w => w.results.totalUsdValue > 0).length.toString() }
    ]

    worksheet.addRows(summaryData)

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    this.styleSummarySheet(worksheet)
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å–æ —Å–≤–æ–¥–∫–æ–π –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
   */
  private async createWalletsSummarySheet (
    results: MultiWalletBalanceResult,
    _config: ExcelExportConfig
  ): Promise<void> {
    const worksheet = this.workbook.addWorksheet('–°–≤–æ–¥–∫–∞ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º')

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.columns = [
      { header: '‚Ññ', key: 'index', width: 5 },
      { header: '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', key: 'address', width: 45 },
      { header: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ç–µ–π', key: 'networksCount', width: 15 },
      { header: '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD)', key: 'totalUsdValue', width: 20 },
      { header: '–°–µ—Ç–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º', key: 'networksWithBalance', width: 15 },
      { header: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤', key: 'tokensCount', width: 15 }
    ]

    // –î–∞–Ω–Ω—ã–µ
    const walletsData = results.wallets.map((wallet, index) => ({
      index: index + 1,
      address: wallet.results.walletAddress,
      networksCount: wallet.results.networks.filter(n => n.nativeBalance.balance > 0n || n.tokenBalances.some(token => token.balance > 0n)).length,
      totalUsdValue: `$${wallet.results.totalUsdValue.toFixed(2)}`,
      networksWithBalance: wallet.results.networks.filter(n => n.totalUsdValue > 0).length,
      tokensCount: wallet.results.networks.reduce((sum, n) => sum + n.tokenBalances.filter(token => token.balance > 0n).length, 0)
    }))

    worksheet.addRows(walletsData)

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (_config.sortByValue) {
      worksheet.getRows(2, worksheet.rowCount - 1)?.sort((a, b) => {
        const aValue = parseFloat(a.getCell('totalUsdValue').value?.toString().replace('$', '') || '0')
        const bValue = parseFloat(b.getCell('totalUsdValue').value?.toString().replace('$', '') || '0')
        return bValue - aValue
      })
    }

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    this.styleNetworksSheet(worksheet)
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º
   */
  private async createMultiWalletDetailsSheet (
    results: MultiWalletBalanceResult,
    _config: ExcelExportConfig
  ): Promise<void> {
    const worksheet = this.workbook.addWorksheet('–î–µ—Ç–∞–ª–∏ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º')

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.columns = [
      { header: '–ö–æ—à–µ–ª–µ–∫', key: 'wallet', width: 45 },
      { header: '–°–µ—Ç—å', key: 'network', width: 20 },
      { header: 'Chain ID', key: 'chainId', width: 10 },
      { header: '–ù–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å', key: 'nativeBalance', width: 20 },
      { header: '–°–∏–º–≤–æ–ª', key: 'symbol', width: 10 },
      { header: 'USD —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ', key: 'nativeUsdValue', width: 20 },
      { header: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤', key: 'tokenCount', width: 15 },
      { header: 'USD —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤', key: 'tokensUsdValue', width: 20 },
      { header: '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (USD)', key: 'totalUsdValue', width: 20 }
    ]

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º –∏ —Å–µ—Ç—è–º
    const allDetails: Array<{
      wallet: string
      network: string
      chainId: number
      nativeBalance: string
      symbol: string
      nativeUsdValue: string
      tokenCount: number
      tokensUsdValue: string
      totalUsdValue: string
    }> = []

    for (const wallet of results.wallets) {
      for (const network of wallet.results.networks) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å (–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–ª–∏ —Ç–æ–∫–µ–Ω—ã)
        if (network.nativeBalance.balance > 0n || network.tokenBalances.some(token => token.balance > 0n)) {
          allDetails.push({
            wallet: wallet.results.walletAddress,
            network: network.networkName,
            chainId: network.chainId,
            nativeBalance: network.nativeBalance.balanceFormatted,
            symbol: network.nativeBalance.symbol,
            nativeUsdValue: `$${network.nativeBalance.usdValue.toFixed(2)}`,
            tokenCount: network.tokenBalances.filter(token => token.balance > 0n).length,
            tokensUsdValue: `$${network.tokenBalances.reduce((sum, token) => sum + token.usdValue, 0).toFixed(2)}`,
            totalUsdValue: `$${network.totalUsdValue.toFixed(2)}`
          })
        }
      }
    }

    worksheet.addRows(allDetails)

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (_config.sortByValue) {
      worksheet.getRows(2, worksheet.rowCount - 1)?.sort((a, b) => {
        const aValue = parseFloat(a.getCell('totalUsdValue').value?.toString().replace('$', '') || '0')
        const bValue = parseFloat(b.getCell('totalUsdValue').value?.toString().replace('$', '') || '0')
        return bValue - aValue
      })
    }

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    this.styleNetworksSheet(worksheet)
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  private async createMultiWalletNativeBalancesSheet (
    results: MultiWalletBalanceResult
  ): Promise<void> {
    const worksheet = this.workbook.addWorksheet('–ù–∞—Ç–∏–≤–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã')

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.columns = [
      { header: '–ö–æ—à–µ–ª–µ–∫', key: 'wallet', width: 45 },
      { header: '–°–µ—Ç—å', key: 'network', width: 20 },
      { header: 'Chain ID', key: 'chainId', width: 10 },
      { header: '–°–∏–º–≤–æ–ª', key: 'symbol', width: 10 },
      { header: '–ë–∞–ª–∞–Ω—Å', key: 'balance', width: 20 },
      { header: 'USD —Å—Ç–æ–∏–º–æ—Å—Ç—å', key: 'usdValue', width: 20 }
    ]

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    const allNativeBalances: Array<{
      wallet: string
      network: string
      chainId: number
      symbol: string
      balance: string
      usdValue: string
    }> = []

    for (const wallet of results.wallets) {
      for (const network of wallet.results.networks) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ –Ω—É–ª—è
        if (network.nativeBalance.balance > 0n) {
          allNativeBalances.push({
            wallet: wallet.results.walletAddress,
            network: network.networkName,
            chainId: network.chainId,
            symbol: network.nativeBalance.symbol,
            balance: network.nativeBalance.balanceFormatted,
            usdValue: `$${network.nativeBalance.usdValue.toFixed(2)}`
          })
        }
      }
    }

    worksheet.addRows(allNativeBalances)

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    this.styleNativeBalancesSheet(worksheet)
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  private async createMultiWalletTokensSheet (
    results: MultiWalletBalanceResult,
    _config: ExcelExportConfig
  ): Promise<void> {
    const worksheet = this.workbook.addWorksheet('–¢–æ–∫–µ–Ω—ã')

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.columns = [
      { header: '–ö–æ—à–µ–ª–µ–∫', key: 'wallet', width: 45 },
      { header: '–°–µ—Ç—å', key: 'network', width: 20 },
      { header: 'Chain ID', key: 'chainId', width: 10 },
      { header: '–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞', key: 'tokenAddress', width: 45 },
      { header: '–°–∏–º–≤–æ–ª', key: 'symbol', width: 15 },
      { header: '–ù–∞–∑–≤–∞–Ω–∏–µ', key: 'name', width: 30 },
      { header: '–ë–∞–ª–∞–Ω—Å', key: 'balance', width: 20 },
      { header: '–î–µ—Ü–∏–º–∞–ª—ã', key: 'decimals', width: 10 },
      { header: '–¶–µ–Ω–∞ (USD)', key: 'priceUsd', width: 15 },
      { header: 'USD —Å—Ç–æ–∏–º–æ—Å—Ç—å', key: 'usdValue', width: 20 }
    ]

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ —Å–µ—Ç–µ–π
    const allTokens: Array<BalanceResult & { wallet: string; network: string; chainId: number }> = []

    for (const wallet of results.wallets) {
      for (const network of wallet.results.networks) {
        for (const token of network.tokenBalances) {
          allTokens.push({
            ...token,
            wallet: wallet.results.walletAddress,
            network: network.networkName,
            chainId: network.chainId
          })
        }
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã (–≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–∏)
    const filteredTokens = allTokens.filter(token => token.balance > 0n)

    // –î–∞–Ω–Ω—ã–µ
    const tokensData = filteredTokens.map(token => ({
      wallet: token.wallet,
      network: token.network,
      chainId: token.chainId,
      tokenAddress: token.address,
      symbol: token.symbol,
      name: token.name,
      balance: token.balanceFormatted,
      decimals: token.decimals,
      priceUsd: `$${parseFloat(token.priceUSD).toFixed(6)}`,
      usdValue: `$${token.usdValue.toFixed(2)}`
    }))

    worksheet.addRows(tokensData)

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (_config.sortByValue) {
      worksheet.getRows(2, worksheet.rowCount - 1)?.sort((a, b) => {
        const aValue = parseFloat(a.getCell('usdValue').value?.toString().replace('$', '') || '0')
        const bValue = parseFloat(b.getCell('usdValue').value?.toString().replace('$', '') || '0')
        return bValue - aValue
      })
    }

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    this.styleTokensSheet(worksheet)
  }
}
