/* eslint-disable @typescript-eslint/no-explicit-any */
import { BalanceChecker } from './balance-checker.js'
import { ExcelExporter } from './excel-exporter.js'
import {
  getAllWalletAddresses,
  getWalletAddressesForSelection,
  getWalletCount,
  formatAddressForSelection
} from './wallet-utils.js'
import prompts from 'prompts'

/**
 * –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–∞
 */
export class BalanceCheckerApp {
  private balanceChecker: BalanceChecker
  private excelExporter: ExcelExporter
  private isShuttingDown = false

  constructor () {
    this.balanceChecker = new BalanceChecker()
    this.excelExporter = new ExcelExporter()
    this.setupGracefulShutdown()
  }

  /**
   * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async showMainMenu (): Promise<void> {
    console.log('\nüöÄ RetroFarm Pro - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–∞')
    console.log('=' .repeat(50))

    const { action } = await prompts({
      type: 'select',
      name: 'action',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      choices: [
        { title: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–æ–≤', value: 'check_wallets' },
        { title: 'üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–π', value: 'check_networks' },
        { title: 'üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)', value: 'export_test' },
        { title: '‚ùå –í—ã—Ö–æ–¥', value: 'exit' }
      ]
    })

    if (!action) {
      console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!')
      return
    }

    await this.handleAction(action)
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
   */
  private async handleAction (action: string): Promise<void> {
    switch (action) {
    case 'check_wallets':
      await this.checkWalletsBalances()
      break
    case 'check_networks':
      await this.checkNetworkAvailability()
      break
    case 'export_test':
      await this.exportTestData()
      break
    case 'exit':
      console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!')
      return
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await this.showMainMenu()
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  private async checkWalletsBalances (): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
      const walletCount = getWalletCount()

      if (walletCount === 0) {
        console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.')
        return
      }

      console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ ${walletCount} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞
      const { action } = await prompts({
        type: 'select',
        name: 'action',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏:',
        choices: [
          { title: `üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ (${walletCount})`, value: 'check_all' },
          { title: 'üéØ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏', value: 'check_selected' }
        ]
      })

      if (!action) return

      if (action === 'check_all') {
        await this.checkAllWallets()
      } else if (action === 'check_selected') {
        await this.checkSelectedWallets()
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—à–µ–ª—å–∫–æ–≤:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏
   */
  private async checkAllWallets (): Promise<void> {
    try {
      const walletAddresses = getAllWalletAddresses()

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const { chainIds } = await prompts({
        type: 'multiselect',
        name: 'chainIds',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (Enter –¥–ª—è –≤—Å–µ—Ö):',
        choices: this.balanceChecker.getSupportedChainIds().map((chainId: number) => {
          const networkConfig = this.balanceChecker.getNetworkConfig(chainId)
          const networkName = networkConfig?.name || `Chain ${chainId}`
          return {
            title: `${networkName} (${chainId})`,
            value: chainId
          }
        }),
        hint: '- –ü—Ä–æ–±–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞, Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
      })

      const results = await this.balanceChecker.checkMultipleWallets(
        walletAddresses,
        {
          chainIds: chainIds.length > 0 ? chainIds : undefined
        }
      )

      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log(this.balanceChecker.formatMultiWalletResults(results))

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
      const { exportToExcel } = await prompts({
        type: 'confirm',
        name: 'exportToExcel',
        message: '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel?',
        initial: true
      })

      if (exportToExcel) {
        await this.exportMultiWalletResultsToExcel(results)
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  }

  /**
   * –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  private async checkSelectedWallets (): Promise<void> {
    try {
      const walletAddresses = getWalletAddressesForSelection()

      // –í—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤
      const { selectedWallets } = await prompts({
        type: 'multiselect',
        name: 'selectedWallets',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:',
        choices: walletAddresses.map((address, index) => ({
          title: `–ö–æ—à–µ–ª–µ–∫ ${index + 1}: ${formatAddressForSelection(address)}`,
          value: address
        })),
        hint: '- –ü—Ä–æ–±–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞, Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
      })

      if (!selectedWallets || selectedWallets.length === 0) {
        console.log('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞')
        return
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const { chainIds } = await prompts({
        type: 'multiselect',
        name: 'chainIds',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (Enter –¥–ª—è –≤—Å–µ—Ö):',
        choices: this.balanceChecker.getSupportedChainIds().map((chainId: number) => {
          const networkConfig = this.balanceChecker.getNetworkConfig(chainId)
          const networkName = networkConfig?.name || `Chain ${chainId}`
          return {
            title: `${networkName} (${chainId})`,
            value: chainId
          }
        }),
        hint: '- –ü—Ä–æ–±–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞, Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
      })

      const results = await this.balanceChecker.checkMultipleWallets(
        selectedWallets,
        {
          chainIds: chainIds.length > 0 ? chainIds : undefined
        }
      )

      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log(this.balanceChecker.formatMultiWalletResults(results))

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
      const { exportToExcel } = await prompts({
        type: 'confirm',
        name: 'exportToExcel',
        message: '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel?',
        initial: true
      })

      if (exportToExcel) {
        await this.exportMultiWalletResultsToExcel(results)
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–π
   */
  private async checkNetworkAvailability (): Promise<void> {
    try {
      console.log('\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–π...')

      const results = await this.balanceChecker.checkNetworkAvailability()

      console.log('\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ç–µ–π:')
      console.log('=' .repeat(50))

      for (const result of results) {
        const status = result.isAvailable ? '‚úÖ' : '‚ùå'
        const rpcInfo = result.workingRPC ? ` (${result.workingRPC})` : ''
        console.log(`${status} ${result.name} (${result.chainId})${rpcInfo}`)
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ç–µ–π:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ Excel
   */
  private async exportMultiWalletResultsToExcel (results: any): Promise<void> {
    try {
      // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const filename = `balances_${new Date().toISOString().split('T')[0]}.xlsx`

      // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω Excel —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
      const excelFilename = await this.excelExporter.exportMultiWalletResults(results, {
        filename,
        sortByValue: false
      })

      console.log(`‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${excelFilename}`)

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ Excel:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  private async exportTestData (): Promise<void> {
    try {
      console.log('\nüìä –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...')

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const testResults: any = {
        walletAddress: '0x1234567890123456789012345678901234567890',
        networks: [
          {
            chainId: 1,
            networkName: 'Ethereum',
            walletAddress: '0x1234567890123456789012345678901234567890',
            nativeBalance: {
              balance: BigInt('1000000000000000000'), // 1 ETH
              balanceFormatted: '1.0',
              symbol: 'ETH',
              usdValue: 2000
            },
            tokenBalances: [
              {
                address: '0xA0b86a33E6441c8C06DdD4C4c4c4c4c4c4c4c4c4',
                symbol: 'USDC',
                name: 'USD Coin',
                balance: BigInt('1000000000'), // 1000 USDC
                balanceFormatted: '1000.0',
                decimals: 6,
                usdValue: 1000,
                priceUSD: '1.0'
              }
            ],
            totalUsdValue: 3000,
            timestamp: Date.now()
          }
        ],
        totalUsdValue: 3000,
        timestamp: Date.now()
      }

      const excelFilename = await this.excelExporter.exportBalanceResults(testResults, {
        filename: 'test_export.xlsx',
        sortByValue: true
      })

      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${excelFilename}`)

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å graceful shutdown
   */
  private setupGracefulShutdown (): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è SIGINT (Ctrl+C)
    process.on('SIGINT', async () => {
      if (this.isShuttingDown) return
      this.isShuttingDown = true

      console.log('\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (SIGINT)...')
      await this.cleanup()
      process.exit(0)
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è SIGTERM
    process.on('SIGTERM', async () => {
      if (this.isShuttingDown) return
      this.isShuttingDown = true

      console.log('\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (SIGTERM)...')
      await this.cleanup()
      process.exit(0)
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    process.on('uncaughtException', async (error) => {
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error)
      await this.cleanup()
      process.exit(1)
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
    process.on('unhandledRejection', async (reason) => {
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason)
      await this.cleanup()
      process.exit(1)
    })
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
   */
  private async cleanup (): Promise<void> {
    try {
      console.log('üßπ –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...')

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.balanceChecker.cleanup()

      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   */
  async run (): Promise<void> {
    try {
      await this.showMainMenu()
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      await this.cleanup()
    }
  }
}
