import { Address } from 'viem'
import { RPCManager } from './rpc-manager.js'
import { TokenListManager } from './token-list-manager.js'
import { Multicall3Service, BalanceResult, NativeBalanceResult } from './multicall3-service.js'
import * as cliProgress from 'cli-progress'

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Ç–∏
 */
export interface NetworkBalanceResult {
  chainId: number
  networkName: string
  walletAddress: string
  nativeBalance: NativeBalanceResult
  tokenBalances: BalanceResult[]
  totalUsdValue: number
  timestamp: number
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
 */
export interface AllNetworksBalanceResult {
  walletAddress: string
  networks: NetworkBalanceResult[]
  totalUsdValue: number
  timestamp: number
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤
 */
export interface BalanceCheckConfig {
  chainIds?: number[] // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏
  batchSize?: number // –†–∞–∑–º–µ—Ä batch –¥–ª—è Multicall3
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
export interface WalletBalanceResult {
  address: string
  results: AllNetworksBalanceResult
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
 */
export interface MultiWalletBalanceResult {
  wallets: WalletBalanceResult[]
  totalUsdValue: number
  timestamp: number
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–∞
 */
export class BalanceChecker {
  private rpcManager: RPCManager
  private tokenListManager: TokenListManager
  private multicallService: Multicall3Service

  constructor () {
    this.rpcManager = new RPCManager()
    this.tokenListManager = new TokenListManager()
    this.multicallService = new Multicall3Service(this.rpcManager, this.tokenListManager)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ chainId
   */
  getSupportedChainIds (): number[] {
    return this.rpcManager.getSupportedChainIds()
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∏ –ø–æ chainId
   */
  getNetworkConfig (chainId: number) {
    return this.rpcManager.getNetworkConfig(chainId)
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async cleanup (): Promise<void> {
    try {
      console.log('üßπ –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã BalanceChecker...')

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.rpcManager.closeAllConnections()

      // –û—á–∏—â–∞–µ–º –∫—ç—à —Ç–æ–∫–µ–Ω–æ–≤
      this.tokenListManager.clearCache()
      console.log('‚úÖ BalanceChecker –æ—á–∏—â–µ–Ω')
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ BalanceChecker:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–∞ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç—è—Ö
   */
  async checkAllNetworks (
    walletAddress: Address,
    config: BalanceCheckConfig = {}
  ): Promise<AllNetworksBalanceResult> {
    const supportedChainIds = this.rpcManager.getSupportedChainIds()
    const chainIds = config.chainIds || supportedChainIds

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const networkPromises = chainIds.map(async (chainId) => {
      try {
        const networkResult = await this.checkSingleNetwork(walletAddress, chainId)
        return networkResult
      } catch {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–µ—Ç–∏
        const networkConfig = this.rpcManager.getNetworkConfig(chainId)
        return {
          chainId,
          networkName: networkConfig?.name || `Chain ${chainId}`,
          walletAddress,
          nativeBalance: {
            balance: 0n,
            balanceFormatted: '0',
            symbol: networkConfig?.nativeCurrency.symbol || 'ETH',
            usdValue: 0
          },
          tokenBalances: [],
          totalUsdValue: 0,
          timestamp: Date.now()
        } as NetworkBalanceResult
      }
    })

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
    const networkResults = await Promise.all(networkPromises)

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const totalUsdValue = networkResults.reduce((sum, network) => sum + network.totalUsdValue, 0)

    const result: AllNetworksBalanceResult = {
      walletAddress,
      networks: networkResults,
      totalUsdValue,
      timestamp: Date.now()
    }

    return result
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏
   */
  async checkSingleNetwork (
    walletAddress: Address,
    chainId: number
  ): Promise<NetworkBalanceResult> {
    const networkConfig = this.rpcManager.getNetworkConfig(chainId)
    if (!networkConfig) {
      throw new Error(`–°–µ—Ç—å —Å chainId ${chainId} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`)
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–µ—Ç–∏
    const tokens = await this.tokenListManager.getTokensForChain(chainId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const nativeBalance = await this.multicallService.checkNativeBalance(chainId, walletAddress)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤
    const tokenBalances = await this.multicallService.checkTokenBalances(
      chainId,
      walletAddress,
      tokens
    )

    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã (–≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–∏)
    const finalTokenBalances = tokenBalances.filter(token => token.balance > 0n)

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const tokenUsdValue = finalTokenBalances.reduce((sum, token) => sum + token.usdValue, 0)
    const totalUsdValue = nativeBalance.usdValue + tokenUsdValue

    return {
      chainId,
      networkName: networkConfig.name,
      walletAddress,
      nativeBalance,
      tokenBalances: finalTokenBalances,
      totalUsdValue,
      timestamp: Date.now()
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–µ–π
   */
  getCacheStats (): {
    rpc: { clientCache: number; healthCache: number }
    tokens: { memoryCache: number; fileCache: number }
    } {
    return {
      rpc: this.rpcManager.getCacheStats(),
      tokens: this.tokenListManager.getCacheStats()
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ç–µ–π
   */
  async checkNetworkAvailability (): Promise<Array<{
    chainId: number
    name: string
    isAvailable: boolean
    workingRPC?: string
  }>> {
    return await this.rpcManager.checkAllNetworks()
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
   */
  exportToJSON (results: AllNetworksBalanceResult, filename?: string): string {
    const jsonString = JSON.stringify(results, null, 2)

    if (filename) {
      const fs = require('fs')
      fs.writeFileSync(filename, jsonString)
      console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ ${filename}`)
    }

    return jsonString
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  formatResultsForConsole (results: AllNetworksBalanceResult): string {
    let output = `\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ ${results.walletAddress}\n`
    output += `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${results.totalUsdValue.toFixed(2)}\n`
    output += `üåê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–µ—Ç–µ–π: ${results.networks.length}\n\n`

    for (const network of results.networks) {
      output += `üîó ${network.networkName} (${network.chainId})\n`
      output += `   üíé ${network.nativeBalance.symbol}: ${network.nativeBalance.balanceFormatted} ($${network.nativeBalance.usdValue.toFixed(2)})\n`

      if (network.tokenBalances.length > 0) {
        output += `   ü™ô –¢–æ–∫–µ–Ω—ã (${network.tokenBalances.length}):\n`
        for (const token of network.tokenBalances.slice(0, 5)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
          output += `      ${token.symbol}: ${token.balanceFormatted} ($${token.usdValue.toFixed(2)})\n`
        }
        if (network.tokenBalances.length > 5) {
          output += `      ... –∏ –µ—â–µ ${network.tokenBalances.length - 5} —Ç–æ–∫–µ–Ω–æ–≤\n`
        }
      }

      output += `   üí∞ –ò—Ç–æ–≥–æ –ø–æ —Å–µ—Ç–∏: $${network.totalUsdValue.toFixed(2)}\n\n`
    }

    return output
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  async checkMultipleWallets (
    walletAddresses: string[],
    config: BalanceCheckConfig = {}
  ): Promise<MultiWalletBalanceResult> {

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
    const progressBar = new cliProgress.SingleBar({
      format: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤: [{bar}] {percentage}% | {value}/{total} –∫–æ—à–µ–ª—å–∫–æ–≤ | {duration_formatted}',
      barCompleteChar: '‚ñà',
      barIncompleteChar: '‚ñë',
      hideCursor: true
    })

    progressBar.start(walletAddresses.length, 0)

    const walletResults: WalletBalanceResult[] = []
    let totalUsdValue = 0

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –±–∞—Ç—á–∞–º–∏ –ø–æ 8 —à—Ç—É–∫ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const BATCH_SIZE = 8

    for (let i = 0; i < walletAddresses.length; i += BATCH_SIZE) {
      const batch = walletAddresses.slice(i, i + BATCH_SIZE)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const batchPromises = batch.map(async (walletAddress) => {
        if (!walletAddress) return null

        try {
          const results = await this.checkAllNetworks(walletAddress as Address, config)
          progressBar.increment()
          return {
            address: walletAddress,
            results
          }
        } catch {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
          progressBar.increment()
          return {
            address: walletAddress,
            results: {
              walletAddress,
              networks: [],
              totalUsdValue: 0,
              timestamp: Date.now()
            }
          }
        }
      })

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ –±–∞—Ç—á–µ
      const batchResults = await Promise.all(batchPromises)

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const result of batchResults) {
        if (result) {
          walletResults.push(result)
          totalUsdValue += result.results.totalUsdValue
        }
      }
    }

    progressBar.stop()

    const result: MultiWalletBalanceResult = {
      wallets: walletResults,
      totalUsdValue,
      timestamp: Date.now()
    }

    return result
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  formatMultiWalletResults (results: MultiWalletBalanceResult): string {
    let output = `\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ ${results.wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤\n`
    output += `üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${results.totalUsdValue.toFixed(2)}\n`
    output += `üåê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: ${results.wallets.length}\n`

    return output
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ JSON
   */
  exportMultiWalletToJSON (results: MultiWalletBalanceResult, filename?: string): string {
    const jsonString = JSON.stringify(results, null, 2)

    if (filename) {
      const fs = require('fs')
      fs.writeFileSync(filename, jsonString)
      console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ ${filename}`)
    }

    return jsonString
  }
}
